/*
 * Copyright (C) 2018 Andy Bond
 *
 * This file is part of gcConvert
 *
 * gcConvert is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * Version 3.0 as published by the Free Software Foundation
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package co.uk.abondservices.gcconvert;

import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;
import com.opencsv.CSVReader;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.List;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;

/**
 *
 * @author andy
 */
public class GCConvert extends javax.swing.JFrame {
    /**
     * Creates new form GCConvert
     */

    JLabel label;
    JPanel busyPanel;
    DefaultComboBoxModel model;
    public GCConvert() {
        initComponents();
        txtFilter.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
              doTxtFilterChanged();
            }
            public void removeUpdate(DocumentEvent e) {
              doTxtFilterChanged();
            }
            public void insertUpdate(DocumentEvent e) {
              doTxtFilterChanged();
            }
        });
        mnuExport.setEnabled(false);
        mnuSaveLircConf.setEnabled(false);
        mnuCreateRawFile.setEnabled(false);
        URL imgURL = getClass().getClassLoader().getResource("pgmIcon.png");
        setIconImage(Toolkit.getDefaultToolkit().getImage(imgURL));

        busyPanel = new JPanel(new BorderLayout());
        label=new JLabel("PLEASE WAIT");
        busyPanel.add(label);// , BorderLayout.PAGE_START
        busyPanel.setVisible(false);
        lblPreData.setVisible(false);
        cboPreData.setVisible(false);
        
        this.add(busyPanel);
        
        // Launch Application in the centre of the screen
        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;

        // Move the window
        this.setLocation(x, y);
        
        mainMenu.addMenuListener(new mainMenuListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        lircConfHeader = new javax.swing.JPanel();
        lblLircConfHeaderName = new javax.swing.JLabel();
        txtLircConfName = new javax.swing.JTextField();
        lblLircConfBits = new javax.swing.JLabel();
        txtLircConfBits = new javax.swing.JTextField();
        lblLircConfEps = new javax.swing.JLabel();
        txtLircConfEps = new javax.swing.JTextField();
        lblLircConfAeps = new javax.swing.JLabel();
        txtLircConfAeps = new javax.swing.JTextField();
        lblLircConfHeaderFlags = new javax.swing.JLabel();
        txtLircConfFlags = new javax.swing.JTextField();
        lblLircConfHeader = new javax.swing.JLabel();
        txtLircConfHeader1 = new javax.swing.JTextField();
        txtLircConfHeader2 = new javax.swing.JTextField();
        lblLircConfOne = new javax.swing.JLabel();
        txtLircConfOne1 = new javax.swing.JTextField();
        txtLircConfOne2 = new javax.swing.JTextField();
        lblLircConfZero = new javax.swing.JLabel();
        txtLircConfZero1 = new javax.swing.JTextField();
        txtLircConfZero2 = new javax.swing.JTextField();
        lblLircConfPtrail = new javax.swing.JLabel();
        txtLircConfPtrail = new javax.swing.JTextField();
        lblLircConfToggle = new javax.swing.JLabel();
        txtLircConfToggle = new javax.swing.JTextField();
        lblLircConfGap = new javax.swing.JLabel();
        txtLircConfGap = new javax.swing.JTextField();
        lblLircConfFrequency = new javax.swing.JLabel();
        txtLircConfFrequency = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        txtProtocol = new javax.swing.JLabel();
        lblPreData = new javax.swing.JLabel();
        cboPreData = new javax.swing.JComboBox<>();
        filterPanel = new javax.swing.JPanel();
        lblFilter = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        cbShowSelected = new javax.swing.JCheckBox();
        scrollPanel = new javax.swing.JScrollPane();
        pnlKeys = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        mnuFileOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuExport = new javax.swing.JMenuItem();
        mnuImport = new javax.swing.JMenuItem();
        mnuSaveLircConf = new javax.swing.JMenuItem();
        mnuCreateRawFile = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GCConvert");

        lircConfHeader.setBorder(null);

        lblLircConfHeaderName.setText("Name:");

        lblLircConfBits.setText("Bits:");

        lblLircConfEps.setText("eps:");

        lblLircConfAeps.setText("aeps:");

        lblLircConfHeaderFlags.setText("Flags:");

        lblLircConfHeader.setText("Header:");

        lblLircConfOne.setText("One:");

        lblLircConfZero.setText("Zero:");

        lblLircConfPtrail.setText("ptrail:");

        lblLircConfToggle.setText("Toggle");

        lblLircConfGap.setText("gap:");

        lblLircConfFrequency.setText("Frequency:");

        jSeparator2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSeparator2.setMaximumSize(new java.awt.Dimension(32767, 2));
        jSeparator2.setMinimumSize(new java.awt.Dimension(2, 2));
        jSeparator2.setPreferredSize(new java.awt.Dimension(50, 5));

        txtProtocol.setText("Protocol Unknown");

        lblPreData.setText("Pre Data:");

        cboPreData.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout lircConfHeaderLayout = new javax.swing.GroupLayout(lircConfHeader);
        lircConfHeader.setLayout(lircConfHeaderLayout);
        lircConfHeaderLayout.setHorizontalGroup(
            lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lircConfHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLircConfHeaderName)
                    .addComponent(lblLircConfHeaderFlags)
                    .addComponent(lblLircConfFrequency)
                    .addComponent(lblLircConfEps)
                    .addComponent(lblLircConfBits))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lircConfHeaderLayout.createSequentialGroup()
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lircConfHeaderLayout.createSequentialGroup()
                                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtLircConfEps)
                                    .addComponent(txtLircConfBits, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)
                                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(lircConfHeaderLayout.createSequentialGroup()
                                        .addComponent(lblLircConfAeps)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtLircConfAeps, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(lircConfHeaderLayout.createSequentialGroup()
                                        .addComponent(lblLircConfToggle)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtLircConfToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(txtLircConfFlags, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtLircConfName, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLircConfHeader, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLircConfOne, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLircConfZero, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLircConfPtrail, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLircConfGap, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(txtLircConfFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtLircConfHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLircConfOne1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLircConfZero1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLircConfPtrail, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLircConfGap, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtLircConfHeader2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLircConfOne2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLircConfZero2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtProtocol)
                    .addGroup(lircConfHeaderLayout.createSequentialGroup()
                        .addComponent(lblPreData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboPreData, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(89, Short.MAX_VALUE))
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        lircConfHeaderLayout.setVerticalGroup(
            lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lircConfHeaderLayout.createSequentialGroup()
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLircConfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblLircConfHeaderName))
                    .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLircConfHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblLircConfHeader))
                    .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLircConfHeader2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtProtocol)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lircConfHeaderLayout.createSequentialGroup()
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtLircConfOne2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPreData)
                                .addComponent(cboPreData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblLircConfOne)
                                .addComponent(txtLircConfOne1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLircConfZero)
                            .addComponent(txtLircConfZero1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLircConfZero2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLircConfPtrail)
                            .addComponent(txtLircConfPtrail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lircConfHeaderLayout.createSequentialGroup()
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLircConfBits)
                            .addComponent(txtLircConfBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLircConfToggle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLircConfToggle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLircConfEps)
                            .addComponent(txtLircConfEps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLircConfAeps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLircConfAeps))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLircConfHeaderFlags)
                            .addComponent(txtLircConfFlags, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lircConfHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLircConfGap)
                    .addComponent(txtLircConfGap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLircConfFrequency)
                    .addComponent(txtLircConfFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        filterPanel.setPreferredSize(new java.awt.Dimension(488, 44));

        lblFilter.setText("Filter by function name:");

        cbShowSelected.setText("Show Selected");
        cbShowSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbShowSelectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addComponent(cbShowSelected)
                .addGap(49, 49, 49)
                .addComponent(lblFilter)
                .addGap(4, 4, 4)
                .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 398, Short.MAX_VALUE))
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFilter)
                .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cbShowSelected))
        );

        javax.swing.GroupLayout pnlKeysLayout = new javax.swing.GroupLayout(pnlKeys);
        pnlKeys.setLayout(pnlKeysLayout);
        pnlKeysLayout.setHorizontalGroup(
            pnlKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 871, Short.MAX_VALUE)
        );
        pnlKeysLayout.setVerticalGroup(
            pnlKeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );

        scrollPanel.setViewportView(pnlKeys);

        mainMenu.setText("File");

        mnuFileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuFileOpen.setText("Open GCC Raw File...");
        mnuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileOpenActionPerformed(evt);
            }
        });
        mainMenu.add(mnuFileOpen);
        mainMenu.add(jSeparator1);

        mnuExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mnuExport.setText("Export Current...");
        mnuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportActionPerformed(evt);
            }
        });
        mainMenu.add(mnuExport);

        mnuImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        mnuImport.setText("Import...");
        mnuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuImportActionPerformed(evt);
            }
        });
        mainMenu.add(mnuImport);

        mnuSaveLircConf.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSaveLircConf.setText("Save LIRC.CONF File...");
        mnuSaveLircConf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveLircConfActionPerformed(evt);
            }
        });
        mainMenu.add(mnuSaveLircConf);

        mnuCreateRawFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        mnuCreateRawFile.setText("Create LIRC.CONF RAW File");
        mnuCreateRawFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreateRawFileActionPerformed(evt);
            }
        });
        mainMenu.add(mnuCreateRawFile);
        mainMenu.add(jSeparator3);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mainMenu.add(mnuExit);

        menuBar.add(mainMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lircConfHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lircConfHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(187, 187, 187)
                    .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(379, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(218, 218, 218)
                    .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Settings settings=new Settings();
    private KeyEditorListener keyEditorListener=new KeyEditorListener();
    private File path=null;
    
    private void mnuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileOpenActionPerformed
        
        if (path != null) fileChooser.setCurrentDirectory(path);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            busy();
            settings=null;
            settings=new Settings();
            File file = fileChooser.getSelectedFile();
            path=fileChooser.getCurrentDirectory();
            settings.setName(file.getName().split("\\.")[0]);
            settings.getGccItems().clear();
            try {
                CSVReader reader = new CSVReader(new FileReader(file.toString()));
                String [] nextLine;
                while ((nextLine = reader.readNext()) != null) {
                    if (nextLine.length>2){
                        // nextLine[] is an array of values from the line
                            GCCItem nextItem=new GCCItem();
                            nextItem.setFunction(nextLine[0]);
                            nextItem.setCode1(nextLine[1]);
                            settings.getGccItems().add(nextItem);
                        }
                    }
                mnuExport.setEnabled(true);
                mnuSaveLircConf.setEnabled(true);
                mnuCreateRawFile.setEnabled(true);
            } catch(IOException ex){
                System.out.println (ex.toString());
                System.out.println("Could not find file " + file.toString());
            }
            boolean fileOK=settings.getGccItems().size()>0;
            if (fileOK){
                fileOK=(settings.getGccItems().get(0).getFunction().equals("function"));
                if (fileOK){
                    if (settings.getGccItems().size()>1) settings.getGccItems().remove(0);
                    for (GCCItem gccItem : settings.getGccItems()){
                        GCCRawCode gccRawCode=new GCCRawCode();
                        gccRawCode.init(gccItem.getFunction(),gccItem.getCode1());
                        settings.getGccRawCodes().add(gccRawCode);
                    }
                    populateHeader();
                    populateKeys(); 
                }
            }
            if (!fileOK){
                notBusy();
                JOptionPane.showMessageDialog(this, "Invalid File");
            } else {
                settings.setProtocol(checkProtocol());
            }                   
        }
        
        notBusy();
    }//GEN-LAST:event_mnuFileOpenActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void cbShowSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbShowSelectedActionPerformed
        doTxtFilterChanged();
    }//GEN-LAST:event_cbShowSelectedActionPerformed

    private void mnuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportActionPerformed
        busy();
        for (GCCRawCode gccRawCode : settings.getGccRawCodes()){
            int index=settings.getGccRawCodes().indexOf(gccRawCode);           
            KeyEditor keyEditor=(KeyEditor) pnlKeys.getComponent(index);
            gccRawCode.setAndyMoteIndex(keyEditor.getAndyMoteIndex());
            gccRawCode.setUserDefinedKeyName(keyEditor.getTxtUserDefinedKeyName().getText());
            gccRawCode.setSelected(keyEditor.getCbxSelected().isSelected());
        }
        copyHeaderBackToSettings();
        String of=path.getPath() + File.separator + settings.getName()+ ".config";
        writeToFile(of, settings.getJSON());
        notBusy();
    }//GEN-LAST:event_mnuExportActionPerformed
    private void copyHeaderBackToSettings(){
    settings.setName(txtLircConfName.getText());
    settings.setAeps(txtLircConfAeps.getText());
    settings.setBits(txtLircConfBits.getText());
    settings.setEps(txtLircConfEps.getText());
    settings.setGap(txtLircConfGap.getText());
    settings.setHeader1(txtLircConfHeader1.getText());
    settings.setHeader2(txtLircConfHeader2.getText());
    settings.setFlags(txtLircConfFlags.getText());
    settings.setOne1(txtLircConfOne1.getText());
    settings.setOne2(txtLircConfOne2.getText());
    settings.setPtrail(txtLircConfPtrail.getText());
    settings.setToggle(txtLircConfToggle.getText());
    settings.setZero1(txtLircConfZero1.getText());
    settings.setZero2(txtLircConfZero2.getText());
    settings.setFrequency(txtLircConfFrequency.getText());
    }
    private void mnuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuImportActionPerformed
        
        if (path != null) fileChooser.setCurrentDirectory(path);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            busy();
            settings=null;
            settings=new Settings();
            File file = fileChooser.getSelectedFile();
            path=fileChooser.getCurrentDirectory();
            String userJson=readFromFile(file.toString());
            if (!userJson.equals("")) {
                Gson gson = new Gson();
                try
                {   
                    JsonReader jsonReader = new JsonReader(new StringReader(userJson));
                    jsonReader.setLenient(true);
                    //gson.fromJson(jsonReader, returnType);
                    settings = gson.fromJson(jsonReader, Settings.class);
                    populateHeaderFromSettings();
                    populateKeysFromGCCRawCode();
                    mnuExport.setEnabled(true);
                    mnuSaveLircConf.setEnabled(true);
                    mnuCreateRawFile.setEnabled(true);
                    settings.setProtocol(checkProtocol());
                } catch (Exception ex){
                    notBusy();
                    JOptionPane.showMessageDialog(this, "Invalid File");
                    System.out.println (ex.toString());
                }
            }           
        }
        notBusy();
    }//GEN-LAST:event_mnuImportActionPerformed
    private Protocol checkProtocol(){
        Protocol result=Protocols.getProtocol(settings.getGccRawCodes().get(0).getLircKey().getHeader(),
                                      settings.getGccRawCodes().get(0).getLircKey().getFrequency());
        txtProtocol.setText("Protocol: " +
                result.getProtocol().name());
        return result;
    }
    private void mnuSaveLircConfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveLircConfActionPerformed
        busy();
        String of=path.getPath() + File.separator + settings.getName()+ ".lircd.conf";
        writeLircConf(of);
        notBusy();
    }//GEN-LAST:event_mnuSaveLircConfActionPerformed

    private void mnuCreateRawFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreateRawFileActionPerformed
        busy();
        String of=path.getPath() + File.separator + settings.getName()+ ".lircd.conf";
        writeRawLircConf(of);
        notBusy();
    }//GEN-LAST:event_mnuCreateRawFileActionPerformed
  
    
    private void doShowSelected(){
        for (Component c : pnlKeys.getComponents()) {
            if (c instanceof KeyEditor) { 
                KeyEditor keyEditor = (KeyEditor) c;
               if (keyEditor.isChecked()){
                   c.setVisible(true);
               } else {
                   c.setVisible(!cbShowSelected.isSelected());
               }
            }
        }    
    }    private void doTxtFilterChanged(){
        doShowSelected();
        for (Component c : pnlKeys.getComponents()) {
            if (c instanceof KeyEditor) { 
                KeyEditor keyEditor = (KeyEditor) c;
                if (keyEditor.isVisible())
                    c.setVisible(keyEditor.getName().toLowerCase()
                            .contains(txtFilter.getText().toLowerCase()));
            }
        }    
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GCConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GCConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GCConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GCConvert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GCConvert().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbShowSelected;
    private javax.swing.JComboBox<String> cboPreData;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel lblFilter;
    private javax.swing.JLabel lblLircConfAeps;
    private javax.swing.JLabel lblLircConfBits;
    private javax.swing.JLabel lblLircConfEps;
    private javax.swing.JLabel lblLircConfFrequency;
    private javax.swing.JLabel lblLircConfGap;
    private javax.swing.JLabel lblLircConfHeader;
    private javax.swing.JLabel lblLircConfHeaderFlags;
    private javax.swing.JLabel lblLircConfHeaderName;
    private javax.swing.JLabel lblLircConfOne;
    private javax.swing.JLabel lblLircConfPtrail;
    private javax.swing.JLabel lblLircConfToggle;
    private javax.swing.JLabel lblLircConfZero;
    private javax.swing.JLabel lblPreData;
    private javax.swing.JPanel lircConfHeader;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mnuCreateRawFile;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuExport;
    private javax.swing.JMenuItem mnuFileOpen;
    private javax.swing.JMenuItem mnuImport;
    private javax.swing.JMenuItem mnuSaveLircConf;
    private javax.swing.JPanel pnlKeys;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTextField txtFilter;
    private javax.swing.JTextField txtLircConfAeps;
    private javax.swing.JTextField txtLircConfBits;
    private javax.swing.JTextField txtLircConfEps;
    private javax.swing.JTextField txtLircConfFlags;
    private javax.swing.JTextField txtLircConfFrequency;
    private javax.swing.JTextField txtLircConfGap;
    private javax.swing.JTextField txtLircConfHeader1;
    private javax.swing.JTextField txtLircConfHeader2;
    private javax.swing.JTextField txtLircConfName;
    private javax.swing.JTextField txtLircConfOne1;
    private javax.swing.JTextField txtLircConfOne2;
    private javax.swing.JTextField txtLircConfPtrail;
    private javax.swing.JTextField txtLircConfToggle;
    private javax.swing.JTextField txtLircConfZero1;
    private javax.swing.JTextField txtLircConfZero2;
    private javax.swing.JLabel txtProtocol;
    // End of variables declaration//GEN-END:variables

private void populateHeader(){
    LIRCKey lircKey=settings.getGccRawCodes().get(0).getLircKey();
    txtLircConfName.setText(settings.getName());
    txtLircConfAeps.setText(settings.getAeps());
    txtLircConfBits.setText(Integer.toString(lircKey.getBits()));
    txtLircConfEps.setText(settings.getEps());
    txtLircConfGap.setText(Integer.toString(lircKey.getPeriod(lircKey.getGap())));
    txtLircConfHeader1.setText(Integer.toString(lircKey.getPeriod(lircKey.getHeader().getWord1())));
    txtLircConfHeader2.setText(Integer.toString(lircKey.getPeriod(lircKey.getHeader().getWord2())));
    txtLircConfFlags.setText(settings.getFlags());
    txtLircConfOne1.setText(Integer.toString(lircKey.getPeriod(lircKey.getOne().getWord1())));
    txtLircConfOne2.setText(Integer.toString(lircKey.getPeriod(lircKey.getOne().getWord2())));
    txtLircConfPtrail.setText(Integer.toString(lircKey.getPeriod(lircKey.getPtrail())));
    txtLircConfToggle.setText(settings.getToggle());
    txtLircConfZero1.setText(Integer.toString(lircKey.getPeriod(lircKey.getZero().getWord1())));
    txtLircConfZero2.setText(Integer.toString(lircKey.getPeriod(lircKey.getZero().getWord2())));
    txtLircConfFrequency.setText(Integer.toString(lircKey.getFrequency()));
    setPreData();
    settings.setProtocol(checkProtocol());
}
private void setPreData(){
    if (settings.getGccRawCodes().get(0).getLircKey().isHasPreData()){
        List<String> preDataCodes=new ArrayList<>();
        for (GCCRawCode gccRawCode : settings.getGccRawCodes()) {
            String nextCode=gccRawCode.getLircKey().getPreData();
            if (!preDataCodes.contains(nextCode)){
                preDataCodes.add(nextCode);
            }
        }
        String[] labels = preDataCodes.toArray(new String[0]);
        model = new DefaultComboBoxModel(labels);
        cboPreData.setModel(model); 
        lblPreData.setVisible(true);
        cboPreData.setVisible(true);
    } else {
        lblPreData.setVisible(false);
        cboPreData.setVisible(false);
    }
}
private void populateHeaderFromSettings(){
    txtLircConfName.setText(settings.getName());
    txtLircConfAeps.setText(settings.getAeps());
    txtLircConfBits.setText(settings.getBits());
    txtLircConfEps.setText(settings.getEps());
    txtLircConfGap.setText(settings.getGap());
    txtLircConfHeader1.setText(settings.getHeader1());
    txtLircConfHeader2.setText(settings.getHeader2());
    txtLircConfFlags.setText(settings.getFlags());
    txtLircConfOne1.setText(settings.getOne1());
    txtLircConfOne2.setText(settings.getOne2());
    txtLircConfPtrail.setText(settings.getPtrail());
    txtLircConfToggle.setText(settings.getToggle());
    txtLircConfZero1.setText(settings.getZero1());
    txtLircConfZero2.setText(settings.getZero2());
    txtLircConfFrequency.setText(settings.getFrequency());
    settings.setProtocol(checkProtocol());
}
private void populateKeys(){
    pnlKeys.removeAll();
    pnlKeys.setLayout(new BoxLayout(pnlKeys, BoxLayout.Y_AXIS));

    for (GCCRawCode gccRawCode : settings.getGccRawCodes()){
        LIRCKey lircKey=gccRawCode.getLircKey();
        KeyEditor keyEditor=new KeyEditor();
        keyEditor.getCbxSelected().setText(lircKey.getFunction());
        keyEditor.setIndex(settings.getGccRawCodes().indexOf(gccRawCode));
        keyEditor.setKeyEditorListener(keyEditorListener);
        String hexCode="";
        for (String code : lircKey.getHexCodes()){
            hexCode = hexCode + " " + code;
        }
        keyEditor.getTxtHexCode().setText(hexCode);
        pnlKeys.add(keyEditor);
    }
    pnlKeys.revalidate();
    pnlKeys.repaint();
}
private void populateKeysFromGCCRawCode(){
    pnlKeys.removeAll();
    pnlKeys.setLayout(new BoxLayout(pnlKeys, BoxLayout.Y_AXIS));

    for (GCCRawCode gccRawCode : settings.getGccRawCodes()){
        LIRCKey lircKey=gccRawCode.getLircKey();
        KeyEditor keyEditor=new KeyEditor();
        keyEditor.getCbxSelected().setText(lircKey.getFunction());
        keyEditor.setIndex(settings.getGccRawCodes().indexOf(gccRawCode));
        keyEditor.setKeyEditorListener(keyEditorListener);
        keyEditor.getCbxSelected().setSelected(gccRawCode.isSelected());
        keyEditor.getCboAndyMoteKeyName().setSelectedIndex(gccRawCode.getAndyMoteIndex());
        keyEditor.getTxtUserDefinedKeyName().setText(gccRawCode.getUserDefinedKeyName());
        String hexCode="";
        for (String code : lircKey.getHexCodes()){
            hexCode = hexCode + " " + code;
        }
        keyEditor.getTxtHexCode().setText(hexCode);
        pnlKeys.add(keyEditor);
    }
    pnlKeys.revalidate();
    pnlKeys.repaint();
}
public void writeLircConf(String fileName){
    try {
        PrintWriter outFile = new PrintWriter(new File(fileName));
        outFile.printf("#");
        outFile.printf("%n","");
        outFile.printf("# this file was produced by GCConvert.");
        outFile.printf("%n","");
        outFile.printf("#    Part of the AndyMOTE Project");
        outFile.printf("%n","");
        outFile.printf("#");
        outFile.printf("%n","");
        outFile.printf("%n","");
        outFile.printf("begin remote");
        outFile.printf("%n","");
        outFile.printf("%n","");
        outFile.printf("  name "  + txtLircConfName.getText());
        outFile.printf("%n","");
        outFile.printf("  bits "  + txtLircConfBits.getText());
        outFile.printf("%n","");
        outFile.printf("  flags " + txtLircConfFlags.getText());
        outFile.printf("%n","");
        outFile.printf("  eps "   + txtLircConfEps.getText());
        outFile.printf("%n","");
        outFile.printf("  aeps "  + txtLircConfAeps.getText());
        outFile.printf("%n","");
        outFile.printf("%n","");
        outFile.printf("  header      ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfHeader1.getText(),false);
        customPrintWithPaddingTrailing(outFile,5,txtLircConfHeader2.getText(), true);            
        outFile.printf("  one         ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfOne1.getText(), false);
        customPrintWithPaddingTrailing(outFile,5,txtLircConfOne2.getText(), true);
        outFile.printf("  zero        ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfZero1.getText(), false);
        customPrintWithPaddingTrailing(outFile,5,txtLircConfZero2.getText(), true);                       
        outFile.printf("  ptrail      ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfPtrail.getText(), true);
        outFile.printf("  gap         ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfGap.getText(), true);
        outFile.printf( "  toggle_bit  ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfToggle.getText(), true);
        if (settings.getGccRawCodes().get(0).getLircKey().isHasPreData()){
            String pdBits=String.valueOf(settings.getGccRawCodes().get(0).getLircKey().getPreDataBits());
            outFile.printf( "  pre_data_bits  ");
            customPrintWithPaddingTrailing(outFile,7,pdBits, true);
            outFile.printf( "  pre_data    ");
            customPrintWithPaddingTrailing(outFile,7,settings.getGccRawCodes().get(0).getLircKey().getPreData(), true);
        }
        outFile.printf("%n","");
        outFile.printf("  frequency   ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfFrequency.getText(), true);
        outFile.printf("%n","");
        outFile.printf("  begin codes");
        outFile.printf("%n","");

        for (Component c : pnlKeys.getComponents()) {
            if (c instanceof KeyEditor) { 
                KeyEditor keyEditor = (KeyEditor) c;
                String keyName=""; 
                if (keyEditor.isChecked()){
                    if (keyEditor.getCboAndyMoteKeyName().getSelectedIndex()==0){
                        keyName=keyEditor.getTxtUserDefinedKeyName().getText();
                        keyName.replace(' ', '_');
                    } else {
                        keyName=keyEditor.getCboAndyMoteKeyName().getSelectedItem().toString();
                    }                  
                    outFile.printf("          ");
                    outFile.printf(keyName);
                    if (keyName.length()<25){
                          String spaceN = new String(new char[25-keyName.length()]).replace('\0', ' ');
                          outFile.printf(spaceN);
                    } else {
                        outFile.printf(" ");
                    }
                    int index=keyEditor.getIndex();
                    List<String> hexCodes=settings.getGccRawCodes().get(index).getLircKey().getHexCodes();
                    for (String hexCode : hexCodes){
                        outFile.printf(hexCode);
                        outFile.printf(" ");
                    }
                    outFile.printf("%n","");
                }
            }
        }
        outFile.printf("  end codes");
        outFile.printf("%n","");
        outFile.printf("end remote");
        outFile.printf("%n","");
        outFile.close();
    } catch(IOException ex){
        System.out.println (ex.toString());
    } 

}
public void writeRawLircConf(String fileName){
    try {
        int freq=settings.getGccRawCodes().get(0).getLircKey().getFrequency();
        PrintWriter outFile = new PrintWriter(new File(fileName));
        outFile.printf("#");
        outFile.printf("%n","");
        outFile.printf("# this file was produced by GCConvert.");
        outFile.printf("%n","");
        outFile.printf("#    Part of the AndyMOTE Project");
        outFile.printf("%n","");
        outFile.printf("#");
        outFile.printf("%n","");
        outFile.printf("%n","");
        outFile.printf("begin remote");
        outFile.printf("%n","");
        outFile.printf("%n","");
        outFile.printf("  name "  + txtLircConfName.getText());
        outFile.printf("%n","");
        outFile.printf("  flags RAW_CODES|CONST_LENGTH");// + txtLircConfFlags.getText());
        outFile.printf("%n","");
        outFile.printf("  eps "   + txtLircConfEps.getText());
        outFile.printf("%n","");
        outFile.printf("  aeps "  + txtLircConfAeps.getText());
        outFile.printf("%n","");
        outFile.printf("%n","");
//            outFile.printf("  ptrail      ");
//            customPrint(outFile,7,txtLircConfPtrail.getText(), true);
        outFile.printf("  gap         ");
        customPrintWithPaddingTrailing(outFile,7,txtLircConfGap.getText(), true);
        outFile.printf("%n","");
        outFile.printf("      begin raw_codes");
        outFile.printf("%n","");
        outFile.printf("%n","");

        for (Component c : pnlKeys.getComponents()) {
            if (c instanceof KeyEditor) { 
                KeyEditor keyEditor = (KeyEditor) c;
                String keyName=""; 
                if (keyEditor.isChecked()){
                    if (keyEditor.getCboAndyMoteKeyName().getSelectedIndex()==0){
                        keyName=keyEditor.getTxtUserDefinedKeyName().getText();
                        keyName.replace(' ', '_');
                    } else {
                        keyName=keyEditor.getCboAndyMoteKeyName().getSelectedItem().toString();
                    }                  
                    outFile.printf("          name ");
                    outFile.printf(keyName);






                    int index=keyEditor.getIndex();
                    List<Integer> irCodes=settings.getGccRawCodes().get(index).getIRSeq();
                    int siz=settings.getGccRawCodes().get(index).getLircKey().getOffset()-2;
                    if (siz==-1) siz=irCodes.size()-1;
                    int col=0;
                    for (int i = 0; i < siz; i++){
                        if (col==0){
                            outFile.printf("%n","");
                            outFile.printf("         ");
                        }
                        int value=UTIL.getPeriod(irCodes.get(i),freq);
                        customPrintWithPaddingLeading(outFile, 8, String.valueOf(value).trim(), false);
                        col++;
                        if (col==6) col=0;
                    }

                    outFile.printf("%n","");
                    outFile.printf("%n","");
                }
            }
        }
        outFile.printf("      end raw_codes");
        outFile.printf("%n","");
        outFile.printf("%n","");
        outFile.printf("end remote");
        outFile.printf("%n","");
        outFile.close();
    } catch(IOException ex){
        System.out.println (ex.toString());
    } 
}
private void customPrintWithPaddingTrailing(PrintWriter outFile,int fieldMinSize, String printThis, boolean withNewLine){
    //prints a string to outFile with a min field size of fieldMinSize
    //padding is trailing.. ie string to print is printed first then the padding.
    outFile.printf(printThis);
    if (printThis.length()<fieldMinSize){
         String spaceN = new String(new char[fieldMinSize-printThis.length()]).replace('\0', ' ');
         outFile.printf(spaceN);
    } else {
        outFile.printf(" ");//ensure there is at least one space...
    }
    if (withNewLine){
        outFile.printf("%n","");
    }
}
private void customPrintWithPaddingLeading(PrintWriter outFile,int fieldMinSize, String printThis, boolean withNewLine){
    //prints a string to outFile with a min field size of fieldMinSize
    //padding is trailing.. ie string to print is printed first then the padding.
    if (printThis.length()<fieldMinSize){
         String spaceN = new String(new char[fieldMinSize-printThis.length()]).replace('\0', ' ');
         outFile.printf(spaceN);
    } else {
        outFile.printf(" ");//ensure there is at least one space...
    }
    outFile.printf(printThis);
    if (withNewLine){
        outFile.printf("%n","");
    }
}

public void writeToFile(String fileName, String writeThis){
    try {
        BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
        writer.write(writeThis);
        writer.close();
    } catch(IOException ex){
        System.out.println (ex.toString());
    } 
}

public String readFromFile(String fileName){
    String content="";
    try{
        BufferedReader reader = new BufferedReader(new FileReader(fileName));
        StringBuilder stringBuilder = new StringBuilder();
        char[] buffer = new char[10];
        while (reader.read(buffer) != -1) {
                stringBuilder.append(new String(buffer));
                buffer = new char[10];
        }
        reader.close();

        content = stringBuilder.toString();
    } catch(IOException ex){
        System.out.println (ex.toString());
    } 
    return content;
}
private void busy(){
    this.setEnabled(false);
    lircConfHeader.setVisible(false);
    filterPanel.setVisible(false);
    scrollPanel.setVisible(false);
    busyPanel.setVisible(true);
    
    int width=busyPanel.getParent().getWidth();
    int height=busyPanel.getParent().getHeight();
    busyPanel.setLocation(0, 0);
    busyPanel.setSize(width, height);
    
    label.setLocation(height/2, (width/2)-(label.getWidth()/2));
    
    busyPanel.getParent().revalidate();
    busyPanel.getParent().invalidate();
    busyPanel.getParent().repaint(); 
}
private void notBusy(){
    this.setEnabled(true);
    lircConfHeader.setVisible(true);
    filterPanel.setVisible(true);
    scrollPanel.setVisible(true);
    busyPanel.setVisible(false);
}

private class KeyEditorListener implements KeyEditor.OnKeyEditorListener {
    @Override
    public void OnCheckedStateChanged(KeyEditor keyEditor){
        int index=keyEditor.getIndex();
        settings.getGccRawCodes().get(index).setSelected(keyEditor.getCbxSelected().isSelected());
        
    };
    @Override
    public void OnAndyMoteKeyIndexChanged(KeyEditor keyEditor){
        int index=keyEditor.getIndex();
        settings.getGccRawCodes().get(index).setAndyMoteIndex(keyEditor.getCboAndyMoteKeyName().getSelectedIndex());
    };
    @Override
    public void OnUserDefinedNameChanged(KeyEditor keyEditor){
        int index=keyEditor.getIndex();
        settings.getGccRawCodes().get(index).setUserDefinedKeyName(keyEditor.getTxtUserDefinedKeyName().getText());
    };
}

class mainMenuListener implements MenuListener {

    @Override
    public void menuSelected(MenuEvent e) {
    //    System.out.println("menuSelected");
            mnuSaveLircConf.setEnabled(!settings.getProtocol().isRaw());
    }

    @Override
    public void menuDeselected(MenuEvent e) {
    //    System.out.println("menuDeselected");
    }

    @Override
    public void menuCanceled(MenuEvent e) {
    //    System.out.println("menuCanceled");
    }
}
    
}
